/**
 *  Autogenerated class
 */
package org.c3s.edgo.common.access;

import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.c3s.db.access.Access;
import org.c3s.db.*;
import org.c3s.db.beans.*;
import org.c3s.db.injectors.SqlInjectorInterface;
import org.c3s.db.injectors.EmptySqlInjector;
import org.c3s.data.mapers.*;
import org.c3s.data.cast.*;


import org.c3s.edgo.common.beans.*;


@SuppressWarnings("unused")
public class DBSystemFactionsHistoryAccess extends Access {
	protected DBConnection getConnection() {
		setNames();
		return getCon();
	}
	
	private DataMapper dataMapper = new GeneralDataMapper(new GeneralCastType()); 
	
	protected void setNames() {
		con_name = "edgo";
		tablename = "system_factions_history";
	}
	
	
	public int insert(DBSystemFactionsHistoryBean bean) throws SQLException, IllegalArgumentException, IllegalAccessException {
		setNames();
		int res = _insert(bean);
		bean.setAutoincrementField(res);
		return res;
	}

	
	public List<DBSystemFactionsHistoryBean> getTableRecords() throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		return getTableRecords(null);
	}
	public List<DBSystemFactionsHistoryBean> getTableRecords(SqlInjectorInterface injector) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		List<Map<String, Object>> result = _getTableRecords(injector);
		
		List<DBSystemFactionsHistoryBean> ret = null;
		if (result != null) {
			ret = new ArrayList<DBSystemFactionsHistoryBean>();
			for (Map<String, Object> res : result) {
				DBSystemFactionsHistoryBean bean = dataMapper.mapFromRow(res, DBSystemFactionsHistoryBean.class);
				
				ret.add(bean);
			}
		}
		return ret;
	}
	
	
	public DBSystemFactionsHistoryBean getByPrimaryKey(java.math.BigInteger paramSystemFactionsHistoryId)  throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		DBSystemFactionsHistoryBean ret = null;
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		String sql = "SELECT t.* "+injector.getRecordQuery()+" FROM " + tablename + " as t "+injector.getFromQuery()+" WHERE 1=1  AND  system_factions_history_id= ?  "+injector.getWhereQuery()+" ";
		if (injector.getOrderQuery().length() != 0) {
			sql += injector.getOrderQuery();
		} else { 
			
		}
		String limit = injector.getLimitQuery();
		if (limit.length() != 0) {
			sql += limit;
		} else {
			sql += " LIMIT 1";
		}
		
		
		
		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getByPrimaryKey", sql ,  paramSystemFactionsHistoryId);
		if (result != null) {
			
			ret = dataMapper.mapFromRow(result.get(0), DBSystemFactionsHistoryBean.class);
			
		}
		return ret;
	}
	
	public int updateByPrimaryKey(DBSystemFactionsHistoryBean bean, java.math.BigInteger paramSystemFactionsHistoryId) throws SQLException, IllegalArgumentException, IllegalAccessException {
		setNames();
		 Map<String, Object> map = dataMapper.mapToRow(bean);
		 Map<String, Object> keys = new HashMap<String, Object>();
		 
		 keys.put("system_factions_history_id",  paramSystemFactionsHistoryId);
		 
		return getConnection().updateRow("system_factions_history", map, keys);
	}
	
	public List<DBSystemsFactionHistoryBean> getSystemsFactionHistory(Long paramFactionId) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT sf.system_id, sf.faction_id, '' as create_date 				FROM system_factions_history sf1 				LEFT JOIN system_factions_history sf ON sf.system_id = sf1.system_id 				WHERE sf1.faction_id = ? 				GROUP BY sf.system_id, sf.faction_id 				ORDER BY sf.system_id, sf.faction_id 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getSystemsFactionHistory", query ,  paramFactionId);
		List<DBSystemsFactionHistoryBean> ret = null;
		if (result != null) {
					ret = new ArrayList<DBSystemsFactionHistoryBean>();
				
			for (Map<String, Object> res : result) {
				DBSystemsFactionHistoryBean bean = dataMapper.mapFromRow(res, DBSystemsFactionHistoryBean.class);
														
				ret.add(bean);
			}
					
		}
			
		return ret;
	}
	
	public List<DBSystemFactionInfluenceBean> getSystemFactionInfluence(String paramToDate, org.c3s.edgo.common.intruders.SystemFactionHistoryInjector paramIntruder) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		if (paramIntruder != null) {
			injector = paramIntruder;
		}
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT sf.*, s.name as system_name, f.name as faction_name, b.* 				FROM system_factions_history sf 				LEFT JOIN bgs_states b ON sf.state_id = b.state_id 				LEFT JOIN systems s ON sf.system_id = s.system_id 				LEFT JOIN factions f ON sf.faction_id = f.faction_id 				WHERE 1=1 				AND sf.faction_id != 75458 				AND sf.create_date <= ?   				" + where + " 				GROUP BY sf.system_id, f.name, sf.create_date			 				ORDER BY sf.system_id, f.name, sf.create_date			 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getSystemFactionInfluence", query ,  paramToDate);
		List<DBSystemFactionInfluenceBean> ret = null;
		if (result != null) {
					ret = new ArrayList<DBSystemFactionInfluenceBean>();
				
			for (Map<String, Object> res : result) {
				DBSystemFactionInfluenceBean bean = dataMapper.mapFromRow(res, DBSystemFactionInfluenceBean.class);
														
				ret.add(bean);
			}
					
		}
			
		return ret;
	}
	
	public List<DBSystemFactionInfluence1Bean> getSystemFactionInfluence1(Long paramFactionId, String paramToDate, String paramFromDate, String paramFromDateCheck) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT sf.*, s.name as system_name, f.name as faction_name, b.* 				FROM system_factions_history sf1 				LEFT JOIN system_factions_history sf ON sf.system_id = sf1.system_id 				LEFT JOIN bgs_states b ON sf.state_id = b.state_id 				LEFT JOIN systems s ON sf.system_id = s.system_id 				LEFT JOIN factions f ON sf.faction_id = f.faction_id 				WHERE sf1.faction_id = ? 				AND sf1.create_date <= ? 				AND (sf1.create_date >= ? OR sf1.create_date > ( 					SELECT sf2.create_date  					FROM system_factions_history sf2 					WHERE sf2.create_date < ? 					ORDER BY sf2.create_date DESC 					LIMIT 1 				))     				GROUP BY sf.system_id, f.name, sf.create_date			 				ORDER BY sf.system_id, f.name, sf.create_date			 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getSystemFactionInfluence1", query ,  paramFactionId,  paramToDate,  paramFromDate,  paramFromDateCheck);
		List<DBSystemFactionInfluence1Bean> ret = null;
		if (result != null) {
					ret = new ArrayList<DBSystemFactionInfluence1Bean>();
				
			for (Map<String, Object> res : result) {
				DBSystemFactionInfluence1Bean bean = dataMapper.mapFromRow(res, DBSystemFactionInfluence1Bean.class);
														
				ret.add(bean);
			}
					
		}
			
		return ret;
	}
	
	public List<DBLastSystemFactionStateBean> getLastSystemFactionState(java.math.BigInteger paramSystemId) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT fsh.*, f.uniq 				FROM factions f, system_factions_history fsh 				WHERE fsh.system_id = ? 				AND f.faction_id = fsh.faction_id 				AND fsh.system_factions_history_id = ( 					SELECT sh.system_factions_history_id  					FROM system_factions_history sh 					WHERE sh.system_id = fsh.system_id 					AND sh.faction_id=fsh.faction_id 					 					ORDER BY sh.create_date DESC 					LIMIT 1   				)  				ORDER BY fsh.faction_id 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getLastSystemFactionState", query ,  paramSystemId);
		List<DBLastSystemFactionStateBean> ret = null;
		if (result != null) {
					ret = new ArrayList<DBLastSystemFactionStateBean>();
				
			for (Map<String, Object> res : result) {
				DBLastSystemFactionStateBean bean = dataMapper.mapFromRow(res, DBLastSystemFactionStateBean.class);
														
				ret.add(bean);
			}
					
		}
			
		return ret;
	}
	
	public DBLastSystemFactionStateDateBean getLastSystemFactionStateDate(java.math.BigInteger paramSystemId) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT fsh.create_date 				FROM system_factions_history fsh 				WHERE fsh.system_id = ? 				ORDER BY fsh.create_date DESC 				LIMIT 1 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getLastSystemFactionStateDate", query ,  paramSystemId);
		DBLastSystemFactionStateDateBean ret = null;
		if (result != null) {
					ret = new DBLastSystemFactionStateDateBean();
				
					ret = dataMapper.mapFromRow(result.get(0), DBLastSystemFactionStateDateBean.class);
					
		}
			
		return ret;
	}
	
}