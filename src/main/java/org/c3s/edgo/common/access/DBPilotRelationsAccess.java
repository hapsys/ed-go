/**
 *  Autogenerated class
 */
package org.c3s.edgo.common.access;

import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.c3s.db.access.Access;
import org.c3s.db.*;
import org.c3s.db.beans.*;
import org.c3s.db.injectors.SqlInjectorInterface;
import org.c3s.db.injectors.EmptySqlInjector;
import org.c3s.data.mapers.*;
import org.c3s.data.cast.*;
import org.c3s.edgo.utils.cast.EdGoCast;


import org.c3s.edgo.common.beans.*;


@SuppressWarnings("unused")
public class DBPilotRelationsAccess extends Access {
	protected DBConnection getConnection() {
		setNames();
		return getCon();
	}
	
	private DataMapper dataMapper = new GeneralDataMapper(new EdGoCast()); 
	
	protected void setNames() {
		con_name = "edgo";
		tablename = "pilot_relations";
	}
	
	
	public int insert(DBPilotRelationsBean bean) throws SQLException, IllegalArgumentException, IllegalAccessException {
		setNames();
		int res = _insert(bean);
		bean.setAutoincrementField(res);
		return res;
	}

	
	public List<DBPilotRelationsBean> getTableRecords() throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		return getTableRecords(null);
	}
	public List<DBPilotRelationsBean> getTableRecords(SqlInjectorInterface injector) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		List<Map<String, Object>> result = _getTableRecords(injector);
		
		List<DBPilotRelationsBean> ret = null;
		if (result != null) {
			ret = new ArrayList<DBPilotRelationsBean>();
			for (Map<String, Object> res : result) {
				DBPilotRelationsBean bean = dataMapper.mapFromRow(res, DBPilotRelationsBean.class);
				
				ret.add(bean);
			}
		}
		return ret;
	}
	
	
	public DBPilotInfoLinkWithDefaultsBean getAjaxPilotInfoLinkWithDefaults(Long paramPilotId, String paramLink) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT i.*, CAST(IF(ISNULL(ip.level), IF(ISNULL(ui.level), i.def_level, ui.level), ip.level) AS UNSIGNED INTEGER) as level 				FROM info_ajax_links al, (info i, pilots p) 				LEFT JOIN pilots_info ip ON ip.pilot_id = p.pilot_id AND ip.info_id = i.info_id 				LEFT JOIN users_info ui ON ui.user_id = p.user_id AND ui.info_id = i.info_id 				WHERE p.pilot_id = ? 				AND i.info_id = al.info_id 				AND al.info_ajax_link = ?  				GROUP BY i.info_id 				ORDER BY i.sort 				LIMIT 1 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getAjaxPilotInfoLinkWithDefaults", query ,  paramPilotId,  paramLink);
		DBPilotInfoLinkWithDefaultsBean ret = null;
		if (result != null) {
					ret = new DBPilotInfoLinkWithDefaultsBean();
				
					ret = dataMapper.mapFromRow(result.get(0), DBPilotInfoLinkWithDefaultsBean.class);
					
		}
			
		return ret;
	}
	
	public DBPilotInfoLinkWithDefaultsBean getPilotInfoLinkWithDefaults(Long paramPilotId, String paramLink) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT i.*, CAST(IF(ISNULL(ip.level), IF(ISNULL(ui.level), i.def_level, ui.level), ip.level) AS UNSIGNED INTEGER) as level 				FROM (info i, pilots p) 				LEFT JOIN pilots_info ip ON ip.pilot_id = p.pilot_id AND ip.info_id = i.info_id 				LEFT JOIN users_info ui ON ui.user_id = p.user_id AND ui.info_id = i.info_id 				WHERE p.pilot_id = ? 				AND i.info_link = ?  				GROUP BY i.info_id 				ORDER BY i.sort 				LIMIT 1 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getPilotInfoLinkWithDefaults", query ,  paramPilotId,  paramLink);
		DBPilotInfoLinkWithDefaultsBean ret = null;
		if (result != null) {
					ret = new DBPilotInfoLinkWithDefaultsBean();
				
					ret = dataMapper.mapFromRow(result.get(0), DBPilotInfoLinkWithDefaultsBean.class);
					
		}
			
		return ret;
	}
	
	public List<DBPilotsRelationsBean> getPilotsRelations(Long paramSourceUserId, Long paramTargetPilotId) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException {
		setNames();
		SqlInjectorInterface injector = new EmptySqlInjector();
		
		
		String query = injector.getFullQuery();
		if (query == null) {
			String record = injector.getRecordQuery();
			String from = injector.getFromQuery();
			String join = injector.getJoinQuery();
			String where = injector.getWhereQuery();
			String order = injector.getOrderQuery();
			String limit = injector.getLimitQuery();
			query = " 				SELECT IF(ISNULL(pr.relation), 2, pr.relation) as relation, IF (sp.pilot_id = tp.pilot_id, 1, 0) as is_me 				FROM users su, (pilots sp, pilots tp) 				LEFT JOIN pilot_relations pr ON (pr.source_pilot_id = sp.pilot_id AND pr.target_pilot_id = tp.pilot_id) OR (pr.source_pilot_id = tp.pilot_id AND pr.target_pilot_id = tp.pilot_id)   				WHERE su.user_id = ? 				AND sp.user_id = su.user_id 				AND sp.is_ignored = 0 				AND tp.user_id = ? 				AND tp.is_ignored = 0 			";
		}

		
		List<Map<String, Object>> result = getConnection().fetchRows(tablename + ".getPilotsRelations", query ,  paramSourceUserId,  paramTargetPilotId);
		List<DBPilotsRelationsBean> ret = null;
		if (result != null) {
					ret = new ArrayList<DBPilotsRelationsBean>();
				
			for (Map<String, Object> res : result) {
				DBPilotsRelationsBean bean = dataMapper.mapFromRow(res, DBPilotsRelationsBean.class);
														
				ret.add(bean);
			}
					
		}
			
		return ret;
	}
	
}